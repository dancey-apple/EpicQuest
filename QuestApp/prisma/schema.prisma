generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Quests {
  id          Int      @id @default(autoincrement())
  summary     String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  assignee    User?    @relation(fields: [assigneeId], references: [id])
  assigneeId  Int?
  status      String    // "open" | "active" | "completed"
  xp          Int     @default(1)
  gold        Int     @default(0)
}

model User {
  id            Int      @id @default(autoincrement())
  accounts Account[]  // Relation field for Account
  sessions Session[]  // Relation field for Session
  name          String?  // Combine firstName and lastName into a single name field for simplicity with NextAuth
  email         String   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  quests        Quests[]
  level         Int      @default(1)
  xp            Int      @default(0)
  gold          Int      @default(0)
}

// NextAuth.js additional models for handling sessions and accounts

model Account {
  id                 Int      @id @default(autoincrement())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id            Int      @id @default(autoincrement())
  userId        Int
  expires       DateTime
  sessionToken  String   @unique
  accessToken   String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
